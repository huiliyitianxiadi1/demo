<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.BankChoiceDao">

    <resultMap id="BaseResultMap" type="com.example.demo.entity.BankChoice">
        <!--@Table bank_choice-->
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="kemu" column="kemu" jdbcType="VARCHAR"/>
        <result property="timu" column="timu" jdbcType="VARCHAR"/>
        <result property="a" column="A" jdbcType="VARCHAR"/>
        <result property="b" column="B" jdbcType="VARCHAR"/>
        <result property="c" column="C" jdbcType="VARCHAR"/>
        <result property="d" column="D" jdbcType="VARCHAR"/>
        <result property="answer" column="answer" jdbcType="VARCHAR"/>
        <result property="teacherid" column="teacherid" jdbcType="INTEGER"/>
        <result property="fenzhi" column="fenzhi" jdbcType="INTEGER"/>
        <!--封装映射company表数据，user表与company表1对1关系，配置1对1的映射
          association:用于配置1对1的映射
                      属性property：company对象在user对象中的属性名
                      属性javaType：company属性的java对象 类型
                      属性column：user表中的外键引用company表
      -->

        <!--教师表的关联-->
        <association javaType="com.example.demo.entity.Teacher" property="teacher">
            <result property="teacherId" column="teacher_id" jdbcType="INTEGER"/>
            <result property="teacherName" column="teacher_name" jdbcType="VARCHAR"/>
            <result property="teacherEmail" column="teacher_email" jdbcType="VARCHAR"/>
            <result property="teacherPassword" column="teacher_password" jdbcType="VARCHAR"/>
            <result property="teacherNumber" column="teacher_number" jdbcType="VARCHAR"/>
            <result property="teacherSex" column="teacher_sex" jdbcType="VARCHAR"/>
            <result property="school" column="school" jdbcType="VARCHAR"/>
            <result property="subject" column="subject" jdbcType="VARCHAR"/>
            <result property="title" column="title" jdbcType="VARCHAR"/>
            <result property="teacherStatus" column="teacherstatus" jdbcType="VARCHAR"/>

        </association>

    </resultMap>


    <!--查询单个-->
    <select id="queryById" resultMap="BaseResultMap">
        select *
        from graduation.bank_choice
        where id = #{id}
    </select>

    <!--查询指定行数据-->
    <select id="queryAllByLimit" resultMap="BaseResultMap">
        select *
        from graduation.bank_choice
        limit #{offset}, #{limit}
    </select>

    <!--通过实体作为筛选条件查询-->
    <select id="queryAll" resultMap="BaseResultMap">
        select
        *
        from graduation.bank_choice
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="kemu != null and kemu != ''">
                and kemu = #{kemu}
            </if>
            <if test="timu != null and timu != ''">
                and timu = #{timu}
            </if>
            <if test="a != null and a != ''">
                and A = #{a}
            </if>
            <if test="b != null and b != ''">
                and B = #{b}
            </if>
            <if test="c != null and c != ''">
                and C = #{c}
            </if>
            <if test="d != null and d != ''">
                and D = #{d}
            </if>
            <if test="answer != null and answer != ''">
                and answer = #{answer}
            </if>
            <if test="teacherid != null">
                and teacherid = #{teacherid}
            </if>
        </where>
    </select>


    <!--    以下为真实代码-->


    <!--获得分组-->
    <select id="getUserList"
            parameterType="com.example.demo.entity.BankChoice"
            resultMap="BaseResultMap">

        select *
        from graduation.bank_choice,graduation.teacher
        where 1=1 and bank_choice.teacherid=teacher.teacher_id

        <if test="timu != null and timu != ''">
            and INSTR(bank_choice.timu, #{timu} )&gt; 0
        </if>

        <if test="kemu != null and kemu != ''">
            and INSTR(bank_choice.kemu, #{kemu} )&gt; 0
        </if>

        <if test="teacherid != null and teacherid != ''">
            and INSTR(bank_choice.teacherid, #{teacherid} )&gt; 0
        </if>


    </select>

    <!--获得行数-->
    <select id="getUserListCount" resultType="int">
        select count(*)
        from graduation.bank_choice,graduation.teacher
        where 1=1 and bank_choice.teacherid=teacher.teacher_id


        <if test="timu != null and timu != ''">
            and INSTR(bank_choice.timu, #{timu} )&gt; 0
        </if>

        <if test="kemu != null and kemu != ''">
            and INSTR(bank_choice.kemu, #{kemu} )&gt; 0
        </if>


        <if test="teacherid != null and teacherid != ''">
            and INSTR(bank_choice.teacherid, #{teacherid} )&gt; 0
        </if>

    </select>


    <!--获得分组B-->
    <!--    根据试卷查询-->
    <!--    找不包含在试卷中的题-->
    <select id="getUserListB" parameterType="com.example.demo.entity.BankChoice" resultMap="BaseResultMap">

        select *
        from graduation.bank_choice,graduation.teacher
        where 1=1 and bank_choice.teacherid=teacher.teacher_id and
        bank_choice.id NOT in (

        select test_table.dan_id
        from graduation.test_table
        where test_table.test_id=#{textId} and test_table.type=1
        )

        <if test="timu != null and timu != ''">
            and INSTR(bank_choice.timu, #{timu} )&gt; 0
        </if>

        <if test="kemu != null and kemu != ''">
            and INSTR(bank_choice.kemu, #{kemu} )&gt; 0
        </if>

        <if test="teacherid != null and teacherid != ''">
            and INSTR(bank_choice.teacherid, #{teacherid} )&gt; 0
        </if>


    </select>

    <!--获得行数B-->
    <!--    根据试卷查询-->
    <!--    找不包含在试卷中的题-->
    <select id="getUserListCountB" resultType="int">
        select count(*)
        from graduation.bank_choice,graduation.teacher
        where 1=1 and bank_choice.teacherid=teacher.teacher_id and
        bank_choice.id NOT in (

        select test_table.dan_id
        from graduation.test_table
        where test_table.test_id=#{textId} and test_table.type=1
        )

        <if test="timu != null and timu != ''">
            and INSTR(bank_choice.timu, #{timu} )&gt; 0
        </if>

        <if test="kemu != null and kemu != ''">
            and INSTR(bank_choice.kemu, #{kemu} )&gt; 0
        </if>

        <if test="teacherid != null and teacherid != ''">
            and INSTR(bank_choice.teacherid, #{teacherid} )&gt; 0
        </if>


    </select>


    <!--获得分组C-->
    <!--    根据试卷查询-->
    <!--    找包含在试卷中的题-->
    <select id="getUserListC" parameterType="com.example.demo.entity.BankChoice" resultMap="BaseResultMap">

        select *
        from graduation.bank_choice,
             graduation.teacher
        where 1 = 1
          and bank_choice.teacherid = teacher.teacher_id
          and bank_choice.id in (
            select test_table.dan_id
            from graduation.test_table
            where test_table.test_id = #{textId}
              and test_table.type = 1
        )


    </select>

    <!--获得行数C-->
    <!--    根据试卷查询-->
    <!--    找包含在试卷中的题-->
    <select id="getUserListCountC" resultType="int">
        select count(*)
        from graduation.bank_choice,
             graduation.teacher
        where 1 = 1
          and bank_choice.teacherid = teacher.teacher_id
          and bank_choice.id in (
            select test_table.dan_id
            from graduation.test_table
            where test_table.test_id = #{textId}
              and test_table.type = 1
        )


    </select>


    <!--新增所有列-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into graduation.bank_choice(kemu, timu, A, B, C, D, answer, fenzhi, teacherid)
        values (#{kemu}, #{timu}, #{a}, #{b}, #{c}, #{d}, #{answer}, #{fenzhi}, #{teacherid})
    </insert>

    <!--通过主键修改数据-->
    <update id="update">
        update graduation.bank_choice
        <set>
            <if test="kemu != null and kemu != ''">
                kemu = #{kemu},
            </if>
            <if test="timu != null and timu != ''">
                timu = #{timu},
            </if>
            <if test="a != null and a != ''">
                A = #{a},
            </if>
            <if test="b != null and b != ''">
                B = #{b},
            </if>
            <if test="c != null and c != ''">
                C = #{c},
            </if>
            <if test="d != null and d != ''">
                D = #{d},
            </if>
            <if test="answer != null and answer != ''">
                answer = #{answer},
            </if>
            <if test="teacherid != null">
                teacherid = #{teacherid},
            </if>
        </set>
        where id = #{id}
    </update>

    <!--通过主键删除-->
    <delete id="deleteById">
        delete
        from graduation.bank_choice
        where id = #{id}
    </delete>

</mapper>